import React, { useState, useEffect } from 'react';
import { Settings } from 'lucide-react';
import { BrowserRouter, useNavigate } from 'react-router-dom';
import Particles from 'react-tsparticles';
import { motion, AnimatePresence } from 'framer-motion';

const SettingsOverlay = ({ onClose }) => (
  <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70">
    <div className="p-6 text-center bg-gray-900 border border-gray-700 rounded-lg shadow-lg">
      <h2 className="mb-4 text-xl font-semibold text-white">Settings</h2>
      <button
        onClick={onClose}
        className="px-4 py-2 mt-2 text-white bg-green-600 rounded hover:bg-green-500"
      >
        Close
      </button>
    </div>
  </div>
);

const useTheme = () => {
  const [theme, setTheme] = useState('dark');
  const toggleTheme = () => setTheme(prev => (prev === 'dark' ? 'light' : 'dark'));
  return { theme, toggleTheme };
};

const brokers = [
  "Binance", "Coinbase", "E*TRADE", "Robinhood", "Interactive Brokers",
  "Kraken", "Tastytrade", "Charles Schwab", "Bitfinex", "Gemini",
  "Fidelity", "TD Ameritrade"
];

const WelcomeScreenDarkComponent = () => {
  const navigate = useNavigate();
  const { theme, toggleTheme } = useTheme();
  const [broker, setBroker] = useState('');
  const [apiKey, setApiKey] = useState('');
  const [apiSecret, setApiSecret] = useState('');
  const [polygonKey, setPolygonKey] = useState('');
  const [showSettings, setShowSettings] = useState(false);
  const [sessionStarted, setSessionStarted] = useState(false);
  const [errors, setErrors] = useState({});
  const [buttonClicked, setButtonClicked] = useState(false);

  useEffect(() => {
    const savedBroker = localStorage.getItem('broker');
    const savedApiKey = localStorage.getItem('apiKey');
    const savedApiSecret = localStorage.getItem('apiSecret');
    const savedPolygonKey = localStorage.getItem('polygonKey');
    if (savedBroker) setBroker(savedBroker);
    if (savedApiKey) setApiKey(savedApiKey);
    if (savedApiSecret) setApiSecret(savedApiSecret);
    if (savedPolygonKey) setPolygonKey(savedPolygonKey);
  }, []);

  const handleStartSession = () => {
    const newErrors = {};
    if (!broker) newErrors.broker = 'Broker required';
    if (!apiKey) newErrors.apiKey = 'API Key required';
    if (!apiSecret) newErrors.apiSecret = 'API Secret required';
    setErrors(newErrors);

    if (Object.keys(newErrors).length === 0) {
      setButtonClicked(true);
      localStorage.setItem('broker', broker);
      localStorage.setItem('apiKey', apiKey);
      localStorage.setItem('apiSecret', apiSecret);
      localStorage.setItem('polygonKey', polygonKey);
      setTimeout(() => {
        setSessionStarted(true);
        navigate('/dashboard-dark');
      }, 600);
    }
  };

  const isStockBroker = ['E*TRADE', 'Robinhood', 'Interactive Brokers', 'Tastytrade', 'Charles Schwab', 'Fidelity', 'TD Ameritrade'].includes(broker);
  const isDisabled = !(broker && apiKey && apiSecret);

  return (
    <AnimatePresence>
      {!sessionStarted && (
        <motion.div
          initial={{ opacity: 1 }}
          exit={{ opacity: 0, y: -50 }}
          transition={{ duration: 0.6, ease: "easeInOut" }}
          className="relative flex flex-col items-center justify-center min-h-screen overflow-hidden text-white bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900"
        >
          <Particles
            className="absolute inset-0 z-0"
            options={{
              fullScreen: { enable: false },
              background: { color: { value: "transparent" } },
              particles: {
                number: { value: 60 },
                color: { value: ["#22c55e", "#4ade80", "#86efac"] },
                shape: { type: "circle" },
                size: { value: { min: 1, max: 3 } },
                links: { enable: true, color: "#4ade80" },
                opacity: { value: 0.35 },
                move: { enable: true, speed: 0.3 }
              }
            }}
          />

          <div className="absolute z-20 flex items-center gap-4 px-4 py-2 rounded shadow-md top-6 right-6 bg-gray-800/80">
            <div className="text-sm font-medium text-green-400">
              Market Hours: Crypto: 24/7 – Stocks: 9:30 AM – 4:00 PM ET
            </div>
            <button
              onClick={toggleTheme}
              className="px-2 py-1 text-sm border border-gray-600 rounded hover:bg-gray-700"
            >
              ☼
            </button>
            <button
              onClick={() => setShowSettings(true)}
              className="flex items-center gap-1 px-2 py-1 text-sm border border-gray-600 rounded hover:bg-gray-700"
            >
              <Settings className="w-4 h-4" />
            </button>
          </div>

          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, ease: "easeOut" }}
            className="relative z-10 w-full max-w-md px-8 py-10 bg-gray-900 border border-gray-700 shadow-xl rounded-xl"
          >
            <select
              value={broker}
              onChange={(e) => setBroker(e.target.value)}
              className="w-full px-4 py-2 mb-2 text-white bg-gray-800 border border-gray-600 rounded"
            >
              <option value="">Select Broker</option>
              {brokers.map((b) => <option key={b}>{b}</option>)}
            </select>
            {errors.broker && <div className="mb-2 text-sm text-red-500">{errors.broker}</div>}

            <input
              type="text"
              placeholder="API Key"
              value={apiKey}
              onChange={(e) => setApiKey(e.target.value)}
              className="w-full px-4 py-2 mb-2 text-white bg-gray-800 border border-gray-600 rounded"
            />
            {errors.apiKey && <div className="mb-2 text-sm text-red-500">{errors.apiKey}</div>}

            <input
              type="password"
              placeholder="API Secret"
              value={apiSecret}
              onChange={(e) => setApiSecret(e.target.value)}
              className="w-full px-4 py-2 mb-2 text-white bg-gray-800 border border-gray-600 rounded"
            />
            {errors.apiSecret && <div className="mb-2 text-sm text-red-500">{errors.apiSecret}</div>}

            {isStockBroker && (
              <input
                type="text"
                placeholder="Polygon Key (Optional)"
                value={polygonKey}
                onChange={(e) => setPolygonKey(e.target.value)}
                className="w-full px-4 py-2 mb-4 text-white bg-gray-800 border border-gray-600 rounded"
              />
            )}

            <div className="flex gap-4 mt-4">
              <button
                disabled={isDisabled || buttonClicked}
                onClick={handleStartSession}
                className={`w-full px-6 py-3 text-lg font-semibold text-white rounded shadow-md transition ${
                  isDisabled ? 'bg-green-900 cursor-not-allowed' : 'bg-green-600 hover:bg-green-500'
                }`}
              >
                {buttonClicked ? 'Starting...' : 'Start Session'}
              </button>
            </div>
          </motion.div>

          <div className="absolute text-3xl font-bold text-green-400 bottom-6 right-6 animate-pulse">
            €£$¥
          </div>

          {showSettings && <SettingsOverlay onClose={() => setShowSettings(false)} />}
        </motion.div>
      )}
    </AnimatePresence>
  );
};

const WelcomeScreenDark = () => (
  <BrowserRouter>
    <WelcomeScreenDarkComponent />
  </BrowserRouter>
);

export default WelcomeScreenDark;
